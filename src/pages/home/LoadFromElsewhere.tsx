import { Button, Code, Text, TextInput } from '@mantine/core';
import { useScrollIntoView } from '@mantine/hooks';
import axios from 'axios';
import { FormEvent, useCallback, useEffect, useState } from 'react';
import { useNavigate, useSearchParams } from 'react-router-dom';
import { useStore } from '../../store';
import { parseAlgorithmLogs } from '../../utils/algorithm';
import { useAsync } from '../../utils/async';
import { ErrorAlert } from './ErrorAlert';
import { HomeCard } from './HomeCard';

export function LoadFromElsewhere(): JSX.Element {
  const [url, setUrl] = useState('');

  const { scrollIntoView, targetRef } = useScrollIntoView<HTMLDivElement>({
    duration: 0,
  });

  const algorithm = useStore(state => state.algorithm);
  const setAlgorithm = useStore(state => state.setAlgorithm);

  const navigate = useNavigate();
  const searchParams = useSearchParams()[0];

  const loadAlgorithm = useAsync(async (logsUrl: string): Promise<void> => {
    const logsResponse = await axios.get(logsUrl);
    setAlgorithm(parseAlgorithmLogs(logsResponse.data));
    navigate(`/visualizer?open=${logsUrl}`);
  });

  const onSubmit = useCallback(
    (event?: FormEvent<HTMLFormElement>) => {
      event?.preventDefault();

      if (url.trim().length > 0) {
        loadAlgorithm.call(url);
      }
    },
    [loadAlgorithm],
  );

  useEffect(() => {
    if (algorithm !== null || loadAlgorithm.loading) {
      return;
    }

    if (!searchParams.has('open')) {
      return;
    }

    const url = searchParams.get('open') || '';

    setUrl(url);

    if (url.trim().length > 0) {
      scrollIntoView();
      loadAlgorithm.call(url);
    }
  }, []);

  return (
    <div ref={targetRef}>
      <HomeCard title="Load from elsewhere">
        <Text>
          Supports URLs to log files that are in the same format as the ones generated by the Prosperity servers. This
          format is undocumented, but you can get an idea of what it looks like by downloading a log file from a
          submitted algorithm. The URL must allow cross-origin requests from the visualizer&apos;s website.
        </Text>

        {/* prettier-ignore */}
        <Text mt="xs">
        This input type can also be used by browsing to <Code>{window.location.origin}{window.location.pathname}?open=&lt;url&gt;</Code>.
      </Text>

        {loadAlgorithm.error && <ErrorAlert error={loadAlgorithm.error} mt="xs" />}

        <form onSubmit={onSubmit}>
          <TextInput
            label="URL"
            placeholder="URL"
            value={url}
            onInput={e => setUrl((e.target as HTMLInputElement).value)}
            mt="xs"
          />

          <Button fullWidth type="submit" loading={loadAlgorithm.loading} mt="md">
            <div>Load</div>
          </Button>
        </form>
      </HomeCard>
    </div>
  );
}
