import { Group, Text } from '@mantine/core';
import { Dropzone } from '@mantine/dropzone';
import { IconUpload } from '@tabler/icons-react';
import { useCallback, useState } from 'react';
import { ErrorCode, FileRejection } from 'react-dropzone';
import { useNavigate } from 'react-router-dom';
import { useStore } from '../../store';
import { parseAlgorithmLogs } from '../../utils/algorithm';
import { useAsync } from '../../utils/async';
import { ErrorAlert } from './ErrorAlert';
import { HomeCard } from './HomeCard';

function DropzoneContent(): JSX.Element {
  return (
    <Group position="center" spacing="xl" style={{ minHeight: 80, pointerEvents: 'none' }}>
      <IconUpload size={40}></IconUpload>
      <Text size="xl" inline={true}>
        Drag file here or click to select file
      </Text>
    </Group>
  );
}

export function LoadFromFile(): JSX.Element {
  const navigate = useNavigate();

  const [error, setError] = useState<Error>();

  const setAlgorithm = useStore(state => state.setAlgorithm);

  const onDrop = useAsync(
    (files: File[]) =>
      new Promise<void>((resolve, reject) => {
        setError(undefined);

        const reader = new FileReader();

        reader.addEventListener('load', () => {
          try {
            setAlgorithm(parseAlgorithmLogs(reader.result as string));
            navigate('/visualizer');
            resolve();
          } catch (err: any) {
            reject(err);
          }
        });

        reader.addEventListener('error', () => {
          reject(new Error('FileReader emitted an error event'));
        });

        reader.readAsText(files[0]);
      }),
  );

  const onReject = useCallback((rejections: FileRejection[]) => {
    const messages: string[] = [];

    for (const rejection of rejections) {
      const errorType = {
        [ErrorCode.FileInvalidType]: 'Invalid type, only log files are supported.',
        [ErrorCode.FileTooLarge]: 'File too large.',
        [ErrorCode.FileTooSmall]: 'File too small.',
        [ErrorCode.TooManyFiles]: 'Too many files.',
      }[rejection.errors[0].code]!;

      messages.push(`Could not load algorithm from ${rejection.file.name}: ${errorType}`);
    }

    setError(new Error(messages.join('<br/>')));
  }, []);

  return (
    <HomeCard title="Load from file">
      <Text>
        Supports log files that are in the same format as the ones generated by the Prosperity servers. This format is
        undocumented, but you can get an idea of what it looks like by downloading a log file from a submitted
        algorithm.
      </Text>

      {error && <ErrorAlert error={error} mt="xs" />}
      {onDrop.error && <ErrorAlert error={onDrop.error} mt="xs" />}

      <Dropzone onDrop={onDrop.call} onReject={onReject} multiple={false} loading={onDrop.loading} mt="xs">
        <Dropzone.Idle>
          <DropzoneContent />
        </Dropzone.Idle>
        <Dropzone.Accept>
          <DropzoneContent />
        </Dropzone.Accept>
      </Dropzone>
    </HomeCard>
  );
}
